//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DataEntities : DbContext
    {
        public DataEntities()
            : base("name=DataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Comments> Comments { get; set; }
        public virtual DbSet<Contacts> Contacts { get; set; }
        public virtual DbSet<ContentStates> ContentStates { get; set; }
        public virtual DbSet<ContentTypes> ContentTypes { get; set; }
        public virtual DbSet<Settings> Settings { get; set; }
        public virtual DbSet<Contents> Contents { get; set; }
        public virtual DbSet<EventsLog> EventsLog { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<JobsRole> JobsRoles { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Section> Sections { get; set; }
        public virtual DbSet<Union> Unions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UsersType> UsersTypes { get; set; }
        public virtual DbSet<Age> Ages { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<TeamsAuditorium> TeamsAuditoriums { get; set; }
        public virtual DbSet<UsersFriend> UsersFriends { get; set; }
        public virtual DbSet<GamesType> GamesTypes { get; set; }
        public virtual DbSet<Game> Games { get; set; }
        public virtual DbSet<Stage> Stages { get; set; }
        public virtual DbSet<GameSet> GameSets { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<GroupsTeam> GroupsTeams { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamsFan> TeamsFans { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<TeamsPlayer> TeamsPlayers { get; set; }
        public virtual DbSet<GamesCycle> GamesCycles { get; set; }
        public virtual DbSet<PlayoffBracket> PlayoffBrackets { get; set; }
        public virtual DbSet<NotesRecipient> NotesRecipients { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotesGame> NotesGames { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<WallThread> WallThreads { get; set; }
        public virtual DbSet<UsersDvice> UsersDvices { get; set; }
        public virtual DbSet<UnionsDoc> UnionsDocs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<LeaguesDoc> LeaguesDocs { get; set; }
        public virtual DbSet<ClubTeam> ClubTeams { get; set; }
        public virtual DbSet<LeagueTeams> LeagueTeams { get; set; }
        public virtual DbSet<PlayerHistory> PlayerHistory { get; set; }
        public virtual DbSet<League> Leagues { get; set; }
        public virtual DbSet<TeamsDetails> TeamsDetails { get; set; }
        public virtual DbSet<UsersJob> UsersJobs { get; set; }
        public virtual DbSet<SentMessage> SentMessages { get; set; }
        public virtual DbSet<Season> Seasons { get; set; }
        public virtual DbSet<TeamStanding> TeamStandings { get; set; }
        public virtual DbSet<TeamStandingGame> TeamStandingGames { get; set; }
        public virtual DbSet<TeamScheduleScrapper> TeamScheduleScrappers { get; set; }
        public virtual DbSet<TeamScheduleScrapperGame> TeamScheduleScrapperGames { get; set; }
        public virtual DbSet<NotesMessage> NotesMessages { get; set; }
        public virtual DbSet<SportCenter> SportCenters { get; set; }
        public virtual DbSet<Club> Clubs { get; set; }
        public virtual DbSet<Auditorium> Auditoriums { get; set; }
        public virtual DbSet<Event> Events { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
