@model GameForm
@{ 
    var RoundsTypes = new Dictionary<int, string>() { { 0, Messages.SequenceRounds0 }, { 1, Messages.SequenceRounds1 }, { 2, Messages.SequenceRounds2 } };
    var roundsTypesList = RoundsTypes.Select(r => new SelectListItem
    {
        Value = r.Key.ToString(),
        Text = LangHelper.GetGameType(r.Value)
    });
}

@using (Ajax.BeginForm("Edit", "Games",
    new AjaxOptions
    {
        UpdateTargetId = "settings"
    },
    new { id = "gameform", autocomplete = "off" }))
{
    @*<div class="row">
            <div class="col-sm-3 form-group">
                <label class="control-label">תדירות משחקים בשבוע:</label>
                @Html.EditorFor(m => m.WeekRounds, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.WeekRounds)
            </div>
        </div>*@
    <div class="row">
        <div class="col-sm-3 form-group">
            <label class="control-label">@Messages.SequenceRounds:</label>
            @Html.DropDownListFor(m => m.NumberOfSequenceRounds, roundsTypesList, new { @class = "form-control sequenceRounds" })
            @Html.ValidationMessageFor(m => m.NumberOfSequenceRounds)

            @*@Html.TextBoxFor(m => m.NumberOfSequenceRounds, new { @class = "form-control", onkeypress = "return numbersonly(event)" })
            @Html.ValidationMessageFor(m => m.NumberOfSequenceRounds)*@
        </div>
    </div>
    <div class="row">
        <div class="form-group col-sm-8">
            <label class="control-label">@Messages.GamesDays:</label>
            <div class="row">
                @for (int i = 0; i < Model.DaysList.Length; i++)
                {
                    <div class="col-sm-1 text-center">
                        <b>@Model.DaysList[i]</b>
                        <input type="checkbox" class="required" name="DaysArr" value="@(i)" @IsChecked(Model.GameDays, i) />
                    </div>
                }
            </div>
            <span class="field-validation-valid" data-valmsg-for="DaysArr" data-valmsg-replace="true"></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3 form-group">
            <label class="control-label">@Messages.FirstGameStart:</label>
            @Html.TextBoxFor(m => m.StartDate,   new { @class = "from-control frm-date"})
        </div>
        <div class="col-sm-3 form-group">
            <label class="control-label">@Messages.GamesInterval:</label>
            @Html.TextBoxFor(m => m.GamesInterval, new { @class = "form-control", placeholder = "00:00" })
            @Html.ValidationMessageFor(m => m.GamesInterval, Messages.InvalidTime)
        </div>
    </div>
    <div class="row">
        <div class="col-sm-3">
            <label class="control-label">@Messages.Points:</label>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-2 form-group">
            <label class="control-label">@Messages.Win:</label>
            @Html.TextBoxFor(m => m.PointsWin, new { @class = "form-control" })
        </div>
        <div class="col-sm-2 form-group">
            <label class="control-label">@Messages.Draw:</label>
            @Html.TextBoxFor(m => m.PointsDraw, new { @class = "form-control" })
        </div>
        <div class="col-sm-2 form-group">
            <label class="control-label">@Messages.Loss:</label>
            @Html.TextBoxFor(m => m.PointsLoss, new { @class = "form-control" })
        </div>
        <div class="col-sm-2 form-group">
            <label class="control-label">@Messages.TechWin:</label>
            @Html.TextBoxFor(m => m.PointsTechWin, new { @class = "form-control" })
        </div>
        <div class="col-sm-2 form-group">
            <label class="control-label">@Messages.TechLoss:</label>
            @Html.TextBoxFor(m => m.PointsTechLoss, new { @class = "form-control" })
        </div>
    </div>
    <div class="row">
        <div class="col-sm-4">
            @if (TempData["Saved"] != null)
            {
                <span class="text-success">@Messages.DataSavedSuccess</span>
            }
        </div>
        <div class="col-sm-4 form-group text-align offset-3">
            <button class="btn btn-primary" onclick="selectAllInList();">@Messages.Save</button>
        </div>
    </div>
    @Html.HiddenFor(m => m.LeagueId)
    @Html.HiddenFor(m => m.StageId)
    @Html.HiddenFor(m => m.GameId)
}

@functions {
    string IsChecked(string list, int val)
    {
        if (string.IsNullOrEmpty(list))
            return null;

        return Array.IndexOf(list.Split(','), val.ToString()) > -1 ? "checked" : null;
    }
}

<script>
    $(function () {
        $('#gameform').validateBootstrap(true); 
    });


    //$('.updownbtn').click(function () {
    //    var $op = $('#sorttypeslist option:selected'),
    //        $this = $(this);
    //    if ($op.length) {
    //        ($this.data('val') == 'Up') ?
    //            $op.first().prev().before($op) :
    //            $op.last().next().after($op);
    //    }
    //});


    //function selectAllInList() {
    //    $("#sorttypeslist option").each(function () {
    //        var item = {}
    //        item.Value = $(this).val()
    //        item.Text = $(this).html()
    //        $(this).attr("selected", "selected");
    //    });
    //}

</script>

<style>
    #sorttypeslist {
        display: inline-block;
        vertical-align: top;
        overflow: hidden;
        border: solid grey 1px;
    }

        #sorttypeslist select {
            padding: 10px;
            margin: -5px -20px -5px -5px;
        }
</style>
